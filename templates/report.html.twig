{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
<div class="index center">
<h1 id="kmom01">Kmom01</h1></a>
<p class="report">Jag känner till objektorientering från självstudier innan jag började på webbprogrammeringsutbildningen. Här under utbildningen så har jag och min kursare stött på objektorientering
    litet under JavaScript-kursen och mer under OOP-kursen. Vi gick inte in i djupet på vad det är. Det finns en del koncept som (mig veterligen) inte fungerar så bra i Python och som ändå finns i 
    språk som är baserade på OOP. Private/public/protected finns inte på samma sätt i Python. Arv är också mindre utförligt i Python än vad det är i exempelvis C#.
</p>
<p class="report">Mig veterligen så är PHP:s modell för klasser och objekt väldigt likt andra språkers modeller. Jag har inte djupdykt i de andra språken och inte heller i PHP under detta kmom. Men de typiska mönstrena finns här med:
    <ul class="ul-report">
        <li>Arv.</li>
        <li>Konstruktor/destruktor.</li>
        <li>Attribut.</li>
        <li>Objekt.</li>
        <li>Statiska variabler/konstanter.</li>
        <li>Protected/private/public metoder och attribut. Normalfallet är att dessa ska vara private.</li>
    </ul>
</p>

<p class="report">Min uppfattning om kodbasen/koden är att vi använder oss av MVC-designmönstret, med fokus på view och controller. Hittills finns det en del okända delar som jag inte är helt bekant med och
    det sker saker på ett magiskt sett. Det här med att samla routes i olika controllers är jag inte van med. Vi har även flera mappar som heter controllers (i assets och i src). Jag förstår inte heller
    hur encore fungerar än och jag är förvirrad över var bilderna ska placeras. Alla dessa saker skulle jag kunna ta mig tiden till att efterforska redan nu men min erfarenhet med tidigare kurser är 
    att man fattar det till slut ändå. Det är bra att ha frågorna i bakhuvudet i alla fall, då kommer man undermedvetet söka efter svaren. I övrigt så har vi arbetat med MVC-mönstret innan i flera kurser
     men kanske inte så djupt och medvetet som vi kommer arbeta med det nu.
</p>

<p class="report">De områden från <a href="https://phptherightway.com/">PHP The Right Way</a> jag först och främst hade velat lära mig mer om är Servers and Deployment samt Virtualization. Dessa områden är viktiga när man kan grunderna och vill
    skapa en webbapplikation. Jag hade gärna också velat lära mig mer om felhantering (Errors and Exceptions), det känns som att det alltid är bra att kunna detta när man skapar kod för andras skull. 
    Testing är ett område som vi kommer kolla på senare, det är också användbart. Design Patterns är ett intressant område, jag gillar när man pratar om koncept på ett generaliserat plan som går 
att använda på andra områden.</p>

<p class="report">Mina TIL för detta KMOM är:
    <ul class="ul-report">
        <li>Symfony är ett ramverk som Django/Flask/Express för att skapa webbapplikationer i PHP.</li>
        <li>Det går att lägga routes i flera olika filer. Symfony känner igen dessa.</li>
        <li>Även PHP kan skrivas objektorienterat.</li>
        <li>MVC-mönstret verkar vara det bästa mönstret för att samordna koden i en webbapplikation.</li>
        <li>Det är inte helt lätt att få Boostrap att fungera i Symfony 7.</li>
        <li>Har lärt mig mer om MD-filer och hur man skriver en README-fil till sin <a href="https://github.com/airhelios/mvc">Github-repo</a>.</li>
    </ul>

</p>

<h1 id="kmom02">Kmom02</h1></a>

<p class="report">Arv är ett sätt för en klass att ärva attribut och metoder från en annan klass: 
    klasserna får en liknande struktur. Dock kan den ärvande klassen ha fler metoder/attribut än de ärvda.<br>
Komposition är en typ av ägande där en klass äger den andra. När den ägande klassen slutar existera så slutar även den ägda klassen göra det. Den ägda klassen får bara ha en ägare.
<br>Interface är en typ av kontrakt, klassen som implementerar ett interface förbinder sig att ha metoderna i interfacet. Det hindrar dock inte
klassen från att ha fler metoder.<br>
Vissa språk har inte multipelt arv (man kan inte ärva från flera klasser). PHP (och vissa andra språk) kompenserar för detta genom att ha trait istället. 
Trait är en typ av boiler plate-kod med metoder som kan lyftas in i en klass. En klass kan ha flera 
<a href="https://dbwebb.se/guide/kom-igang-med-objektorienterad-programmering-i-php/vad-ar-trait">olika traits</a>. 
<a href="https://www.php.net/manual/en/language.oop5.traits.php">Trait är ingen klass och går inte att instansiera.</a><br>
PHP har i sina tidigare versioner inte kunnat skrivas objekt-orienterat, det var ett procedurellt språk. Objektorientering är inte ett måste för att kunna programmera PHP.
</p>

<p class="report">Jag började den här uppgiften med att göra övningen. Den var för ett tärningsspel och hade sina egna funktioner. 
    Övningen hade också en del funktioner som inte behövdes till det här kursmomentet. Jag skrev om variabelnamn, klassnamn, attribut och metoder för att de skulle passa kursmomentet.
    Jag började som jag oftast gör, med att implementera den klassen som kommer ägas/ärvas (Card). Därefter fokuserade jag på den grafiska representationen (CardGraphic). Jag skapade en CardHand, som egentligen bara är en kopia av
    DiceHand från övningen. Den används inte i det här kursmomentet. Till slut byggde jag DeckOfCards.
    Jag ser en hel del förbättringspotential i form av interface, onödiga klasser/variabler, statiska variabler etc. Jag vet om att jag har en del artefakter kvar i form av variabler och kod som inte används. De kommer från att jag kopierade övningarna och även 
    att jag trodde att jag skulle behöva dem. Jag är dock nöjd med uppgiften. Jag vill inte överarbeta om vi blir tvungna att ändra riktning sen.
</p>

<p class="report">Symfony har sina egenheter, man hjälps en del på traven med funktionerna men man blir också låst. Jag tänker exempelvis på att skriva PHP-logik i Twig. 
    Man får använda inbyggda funktioner istället för att direkt skriva PHP. Jag ser ändå stora fördelar med ramverket. Att skriva det här kursmomentet utan Symfony hade nog gått, det hade dock tagit så mycket längre tid.
    Sessionshanteringen hade varit jobbigare, att göra sidorna hade varit jobbiga, jag hade haft stora problem med att göra routes också. Symfony är inte lika behändigt som Flask dock,
det känns mindre strukturerat. Jag vet inte varför det finns controllers i både assets och i src exempelvis. Var bilderna ska läggas är också lite tvetydigt.</p>   
</p>

<p class="report">Jag har lärt mig mer om OOP i PHP i den här uppgiften (att det är fullt möjligt att skriva OOP i PHP, 
    även om det har några få begränsningar). Jag har lärt mig mer om ordet "dependency injection" (objekt som behövs i klassen injiceras utifrån). 
    Traits var helt nytt för mig. Interface har jag sett innan men jag har nog glömt vad tanken var med det. Jag lärde mig om hur man använder session med Symfony.
    I och med att jag skrev av övningarna istället för att rakt av kopiera dem från exempel-mappen så lärde jag mig mer om hur Symfony fungerar och hur projektet ska byggas upp. 
</p>


<h1 id="kmom03">Kmom03</h1></a>

<p class="report">Jag tyckte att pseudokods-biten inte gav mig något speciellt. Jag ser faktiskt inte nyttan med pseudokod, än. 
    Flödesschemat fungerade bra för att ge mig en grundläggande struktur innan jag började med koden. 
    Dock så slutade jag tänka på den ganska snabbt. Jag gjorde "lokala" flödesscheman när jag behövde. 
    Jag kan nog tänka mig att använda just flödesscheman i framtiden vid behov. Men det blir inga strukturerade utan mest som skisser i mitt anteckningsblock.
</p>

<p class="report">Jag skapade en huvudklass "GameManager" som användes för att hålla koll på kortlek, spelarens hand, dealerns hand och spellogiken. 
    Jag kopierade klasserna från kmom02 (deck) för att jag ville testa nya koncept (dependency injection och interface-klasser). Jag insåg sen att man skulle begränsa koden i sin controller, vilket innebar att jag tog bort dependency injection-aspekten.
    Jag skapade dock en statisk metod som injicerade kortlek, spelarens hand och dealerns hand i konstruktorn för GameManager. Den svåraste biten var nog spellogiken och hur man skulle tänka kring essen.<br><br>
    Jag ser en del förbättringspotential, jag tror exempelvis att spellogiken inte är helt korrekt, jag ser också att min applikation hänger sig då och då men jag vet inte varför. 
    Jag hade också kunnat ta bort en del av logiken från mina twig-mallar samt lägga om en del metoder på Deck/Card/Hand istället för att ha dem i GameManager. Gränssnittet är också en faktor som jag hade velat ändra på.
    <br>Angående lintingen så satte jag phpstan på level 6, jag tyckte det var good enough.
</p>

<p class="report">Jag är ganska nöjd med Symfony, men lämnas småförvirrad ibland. En sak som oroar mig är att det kan dyka upp fel som är svåra att felsöka om det visar sig att dokumentationen för Symfony inte är så omfattande. 
    Jag vill egentligen att det ska finnas många användare av ett ramverk för enklare felsökning. Jag börjar hitta bättre i Symfony nu än tidigare och jag känner mig relativt bekväm med att arbeta i min applikation. Jag hade dock förmodligen blivit tvungen att använda mos dokumentation 
    ifall jag skulle starta ett projekt från scratch.

</p>   


<p class="report">Jag har lärt mig mer om linting samt om statiska analysverktyg. Man kan välja att linta/kontrollera sin kod i olika nivåer. Vi har gått igenom hur man kan strukturera upp sin kod i förväg med exempelvis ramverk(SOLID), pseudokod och flödescheman. 
    Jag har testat att använda dependency inversion principle och interfaces. Jag har lärt mig om hur man kallar en funktion från föräldern i den ärvande klassen samt om hur man skapar statiska metoder. Vi gick igenom lite design patterns också, något som jag tänker att det hade varit kul
    att fördjupa sig i.
</p>

</div>

{% endblock %}